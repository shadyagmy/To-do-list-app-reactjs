{"version":3,"sources":["components/Form.js","components/Todos.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","state","title","content","chaneHandler","e","_this","setState","Object","defineProperty","target","id","value","submitHandler","preventDefault","props","addTodo","react_default","a","createElement","className","onSubmit","this","type","placeholder","onChange","required","style","height","Component","Todos","_ref","todos","removetodo","allTodos","length","map","todo","key","onClick","App","Math","random","push","removeTodo","updatedTodos","filter","_this2","Form_Form","Todos_Todos","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAIqBA,oNAEnBC,MAAQ,CACNC,MAAQ,GACRC,QAAU,MAGZC,aAAe,SAACC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGH,EAAEK,OAAOC,GAAMN,EAAEK,OAAOE,WAK7BC,cAAgB,SAACR,GACfA,EAAES,iBACFR,EAAKS,MAAMC,QAAQV,EAAKL,OACxBK,EAAKC,SAAS,CACZL,MAAQ,GACRC,QAAU,8EAMZ,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,qBACEH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKT,eACnBI,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OACRC,YAAY,QACZb,GAAG,QACHc,SAAUH,KAAKlB,aACfQ,MAAOU,KAAKrB,MAAMC,MAClBwB,UAAQ,IAEZT,EAAAC,EAAAC,cAAA,YAAUI,KAAK,OAAOI,MAAO,CAACC,OAAS,SACrCJ,YAAY,UACZb,GAAG,UACHc,SAAUH,KAAKlB,aACfQ,MAAOU,KAAKrB,MAAME,UAGpBc,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,gBA3CwBM,oBCAnB,SAASC,EAATC,GAAoC,IAApBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,WAC9BC,EAAWF,EAAMG,OAAS,EAAKH,EAAMI,IAAI,SAAAC,GAC7C,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOkB,IAAKD,EAAK1B,IAC9BM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAKkB,EAAKnC,OACVe,EAAAC,EAAAC,cAAA,SAAIkB,EAAKlC,UAEXc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBmB,QAAS,kBAAMN,EAAWI,EAAK1B,WAKlEM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,+CAIL,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbc,OClBeM,6MAEjBvC,MAAQ,CACN+B,MAAQ,MAIZhB,QAAU,SAACqB,GACT,GAAIA,EAAKnC,MAAMiC,OAAS,OACjB,CACLE,EAAK1B,GAAK8B,KAAKC,SACf,IAAIV,EAAQ1B,EAAKL,MAAM+B,MACvBA,EAAMW,KAAKN,GACX/B,EAAKC,SAAS,CAACyB,MAAQA,QAM3BY,WAAa,SAACjC,GACZ,IAAMkC,EAAevC,EAAKL,MAAM+B,MAAMc,OAAQ,SAAAT,GAC1C,OAAOA,EAAK1B,KAAOA,IAGvBL,EAAKC,SAAS,CACZyB,MAAQa,6EAKH,IAAAE,EAAAzB,KACP,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC6B,EAAD,CAAOhC,QAASM,KAAKN,UACrBC,EAAAC,EAAAC,cAAC8B,EAAD,CAAOjB,MAAOV,KAAKrB,MAAM+B,MAAOC,WAAY,SAACtB,GAAD,OAAQoC,EAAKH,WAAWjC,eApC7CkB,aCMbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAQvC,EAAAC,EAAAC,cAACsC,EAAD,MAAQC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.37ead292.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport \"./Form.css\"\r\n\r\nexport default class Form extends Component {\r\n\r\n  state = {\r\n    title : \"\",\r\n    content : \"\"\r\n  }\r\n\r\n  chaneHandler = (e) => {\r\n    this.setState({\r\n      [e.target.id] : e.target.value\r\n    })\r\n   \r\n  }\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({ \r\n      title : \"\",\r\n      content : \"\"\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app__form\">\r\n      <h2 className=\"app__form__heading\">Enter your to do!</h2>\r\n        <form onSubmit={this.submitHandler}>\r\n          <input type=\"text\"\r\n              placeholder=\"Title\"\r\n              id=\"title\"\r\n              onChange={this.chaneHandler}\r\n              value={this.state.title}\r\n              required\r\n              />\r\n          <textarea type=\"text\" style={{height : \"100px\"}}\r\n            placeholder=\"Content\"\r\n            id=\"content\"\r\n            onChange={this.chaneHandler}\r\n            value={this.state.content}\r\n\r\n             />\r\n          <button type=\"submit\">Add</button>\r\n\r\n        </form>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport \"./Todos.css\"\r\n\r\nexport default function Todos({todos, removetodo}) {\r\n  const allTodos = todos.length > 0 ?  todos.map(todo => {\r\n    return (\r\n      <div className=\"todo\" key={todo.id}>\r\n        <div className=\"todo__describtion\">\r\n          <h4>{todo.title}</h4>\r\n          <p>{todo.content}</p>\r\n        </div>\r\n        <div className=\"todo__remove\" >\r\n          <i className=\"fas fa-trash-alt\" onClick={() => removetodo(todo.id)}></i>\r\n        </div>\r\n        \r\n      </div> \r\n    )\r\n  }) : <h3 className=\"noTodo\">Fill your to do list from the previous form</h3>;\r\n    \r\n  \r\n  \r\n  return (\r\n    <div className=\"todos__container\">\r\n     {allTodos}\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\nimport Form from \"./Form\";\r\nimport Todos from \"./Todos\";\r\n\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n      todos : []    \r\n    }\r\n    \r\n\r\n  addTodo = (todo) => {\r\n    if (todo.title.length < 2) {\r\n    } else {\r\n      todo.id = Math.random();\r\n      let todos = this.state.todos;\r\n      todos.push(todo)\r\n      this.setState({todos : todos});\r\n    }\r\n    \r\n    \r\n  }\r\n\r\n  removeTodo = (id) => {\r\n    const updatedTodos = this.state.todos.filter( todo => {\r\n        return todo.id !== id\r\n    })\r\n\r\n    this.setState({\r\n      todos : updatedTodos\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"app__heading\">To do list app</h2>\r\n        <div className=\"app__container\">\r\n          <Form  addTodo={this.addTodo}/>\r\n          <Todos todos={this.state.todos} removetodo={(id) => this.removeTodo(id)} />\r\n        </div>\r\n         \r\n  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}